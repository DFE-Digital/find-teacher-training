name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize, labeled]

env:
  DOCKER_IMAGE: ghcr.io/dfe-digital/find-teacher-training

permissions:
  packages: write
  contents: write
  pull-requests: write

jobs:
  build:
    name: build
    outputs: 
      image_tag: ${{ env.IMAGE_TAG }}
      branch_tag: ${{ env.BRANCH_TAG }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.13.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set Environment Variables (Push)
        if: github.event_name == 'push'
        run: |
          GIT_REF=${{ github.ref }}
          GIT_BRANCH=${GIT_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
          echo "IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Set Environment Variables (Pull request)
        if: github.event_name == 'pull_request'
        run: |
          # This is the actual PR branch
          GIT_REF=${{ github.head_ref }}
          GIT_BRANCH=${GIT_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
          # This is the latest commit on the actual PR branch
          echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Set Environment variable
        run: |
          # tag build to the review env for vars and secrets
          tf_vars_file=terraform/workspace_variables/review.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV

      - uses: azure/login@v1
        if: github.actor != 'dependabot[bot]'
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_REVIEW }}

      - uses: DFE-Digital/keyvault-yaml-secret@v1
        if: github.actor != 'dependabot[bot]'
        id: get-secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}
          key: SNYK_TOKEN

      - name: Build Docker Image - base-image target
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_IMAGE}}:base-image-${{ env.BRANCH_TAG }}
          push: true
          target: base-image
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE}}:base-image-${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_IMAGE}}:base-image-main
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.IMAGE_TAG}}

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_IMAGE}}:${{ env.IMAGE_TAG}}
            ${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
          push: false
          load: true
          cache-from: |
            type=registry,ref=${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
            type=registry,ref=${{ env.DOCKER_IMAGE}}:main
            type=registry,ref=${{ env.DOCKER_IMAGE}}:base-image-${{ env.BRANCH_TAG }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.IMAGE_TAG}}

      - name: Push ${{ env.DOCKER_IMAGE }} images for review
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
        run: docker image push --all-tags ${{ env.DOCKER_IMAGE }}

      - name: Run Snyk to check Docker image for vulnerabilities
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ steps.get-secret.outputs.snyk_token }}
        with:
          image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=high

      - name: Push ${{ env.DOCKER_IMAGE }} images
        if: ${{ success() && !contains(github.event.pull_request.labels.*.name, 'deploy') }}
        run: docker image push --all-tags ${{ env.DOCKER_IMAGE }}

  test:
    name: Unit Tests
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Set Environment variable
        run: echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV

      - name: Run ruby linter
        run: make rubocop

      - name: Run sass linter
        run: make lint-sass

      - name: Run brakeman static analysis
        run: make brakeman

      - name: Run ruby tests
        run: make rspec

      - name: Run javascript tests
        run: make js.test

      - name: Publish Test Coverage to Code Climate
        if: github.actor != 'dependabot[bot]'
        run: make publish.codeclimate
        env:
          GIT_BRANCH: ${{ needs.build.outputs.branch_tag }}
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_REPORTER_ID }} 

  deploy_review:
    name: Deploy Review Environment
    concurrency: deploy_review_${{ github.event.pull_request.number }}
    if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Deploy App to Review environment
        uses: ./.github/actions/deploy/
        with:
          actions-api-access-token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS_REVIEW }}
          environment: review
          pr: ${{ github.event.pull_request.number }}
          sha: ${{ needs.build.outputs.image_tag }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-state-access-key: ${{ secrets.TERRAFORM_STATE_ACCESS_KEY_REVIEW }}

  deploy_all:
    name: Deployment To All
    concurrency: deploy_all
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        environment: [qa,staging,production,sandbox]
      max-parallel: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Deploy App to ${{ matrix.environment }}
        uses: ./.github/actions/deploy/
        with:
          actions-api-access-token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          azure_credentials: ${{ secrets[format('AZURE_CREDENTIALS_{0}', matrix.environment)] }}
          environment: ${{ matrix.environment }}
          sha: ${{ needs.build.outputs.image_tag }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK }}
          terraform-state-access-key: ${{ secrets[format('TERRAFORM_STATE_ACCESS_KEY_{0}', matrix.environment)] }}
