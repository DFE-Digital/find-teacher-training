name: Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, reopened, synchronize, labeled]

env:
  DOCKER_IMAGE: dfedigital/find-teacher-training

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0

      - name: Login to DockerHub
        if: github.actor != 'dependabot[bot]'
        uses: docker/login-action@v1.12.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set Environment Variables (Push)
        if: github.event_name == 'push'
        run: |
          GIT_REF=${{ github.ref }}
          GIT_BRANCH=${GIT_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
          echo "IMAGE_TAG=$GITHUB_SHA" >> $GITHUB_ENV

      - name: Set Environment Variables (Pull request)
        if: github.event_name == 'pull_request'
        run: |
          # This is the actual PR branch
          GIT_REF=${{ github.head_ref }}
          GIT_BRANCH=${GIT_REF##*/}
          echo "BRANCH_TAG=$GIT_BRANCH" >> $GITHUB_ENV
          # This is the latest commit on the actual PR branch
          echo "IMAGE_TAG=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV

      - name: Set Environment variable
        run: |
          # tag build to the review env for vars and secrets
          tf_vars_file=terraform/workspace_variables/review.tfvars.json
          echo "KEY_VAULT_NAME=$(jq -r '.key_vault_name' ${tf_vars_file})" >> $GITHUB_ENV
          echo "KEY_VAULT_INFRA_SECRET_NAME=$(jq -r '.key_vault_infra_secret_name' ${tf_vars_file})" >> $GITHUB_ENV

      - uses: azure/login@v1
        if: github.actor != 'dependabot[bot]'
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_REVIEW }}

      - uses: DFE-Digital/keyvault-yaml-secret@v1
        if: github.actor != 'dependabot[bot]'
        id: get-secret
        with:
          keyvault: ${{ env.KEY_VAULT_NAME }}
          secret: ${{ env.KEY_VAULT_INFRA_SECRET_NAME }}
          key: SNYK_TOKEN

      - name: Build Docker Image - base-image target
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_IMAGE}}:base-image-${{ env.BRANCH_TAG }}
          push: ${{ github.actor != 'dependabot[bot]' }}
          load: ${{ github.actor == 'dependabot[bot]' }}
          target: base-image
          cache-from: |
            ${{ env.DOCKER_IMAGE}}:base-image-${{ env.BRANCH_TAG }}
            ${{ env.DOCKER_IMAGE}}:base-image-main
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.IMAGE_TAG}}

      - name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          tags: |
            ${{ env.DOCKER_IMAGE}}:${{ env.IMAGE_TAG}}
            ${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
          push: false
          load: true
          cache-from: |
            ${{ env.DOCKER_IMAGE}}:${{ env.BRANCH_TAG }}
            ${{ env.DOCKER_IMAGE}}:main
            ${{ env.DOCKER_IMAGE}}:base-image-${{ env.BRANCH_TAG }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            COMMIT_SHA=${{ env.IMAGE_TAG}}

      - name: Push ${{ env.DOCKER_IMAGE }} images for review
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
        run: docker image push --all-tags ${{ env.DOCKER_IMAGE }}

      - name: Trigger Review App Deployment
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Deploy
          ref:    ${{ github.head_ref }}
          token:  ${{ secrets.ACTIONS_API_ACCESS_TOKEN  }}
          inputs: '{"pr": "${{ github.event.pull_request.number }}", "sha": "${{ env.IMAGE_TAG }}"}'

      - name: Run Snyk to check Docker image for vulnerabilities
        if: github.actor != 'dependabot[bot]'
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ steps.get-secret.outputs.snyk_token }}
        with:
          image: ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
          args: --file=Dockerfile --severity-threshold=high

      - name: Run ruby linter
        run: make rubocop

      - name: Run sass linter
        run: make lint-sass

      - name: Run brakeman static analysis
        run: make brakeman

      - name: Run ruby tests
        run: make rspec

      - name: Run javascript tests
        run: make js.test

      - name: Publish Test Coverage to Code Climate
        if: github.actor != 'dependabot[bot]'
        run: make publish.codeclimate
        env:
          GIT_BRANCH: ${{ env.BRANCH_TAG }}
          CC_TEST_REPORTER_ID: ${{ secrets.CODE_CLIMATE_REPORTER_ID }}

      - name: Push ${{ env.DOCKER_IMAGE }} images
        if: ${{ success() && !contains(github.event.pull_request.labels.*.name, 'deploy') && github.actor != 'dependabot[bot]' }}
        run: docker image push --all-tags ${{ env.DOCKER_IMAGE }}

      - name: Trigger QA Deployment
        if: ${{ success() && github.ref == 'refs/heads/main' }}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"qa": "true", "staging": "true", "production": "true", "sandbox": "true", "sha": "${{ env.IMAGE_TAG }}"}'

      - name: Wait for review app deployment
        id: wait_for_review_app_deployment
        if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy') }}
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          checkName: ${{ github.event.pull_request.number }} Deployment
          timeoutSeconds:  1800
          intervalSeconds: 10

      - name: Exit if review app deployment failed
        if: ${{ steps.wait_for_review_app_deployment.outputs.conclusion != '' && steps.wait_for_review_app_deployment.outputs.conclusion != 'success' }}
        run: exit 1
