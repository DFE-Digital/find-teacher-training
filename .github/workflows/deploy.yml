name: Deploy

on:
  workflow_dispatch:
    inputs:
      qa:
        description: Deploy to qa?
        default: 'true'
        required: true
      staging:
        description: Deploy to staging?
        default: 'false'
        required: true
      production:
        description: Deploy to production?
        default: 'false'
        required: true
      sha:
        description: Commit sha to be deployed
        required: true

jobs:
  prepare-matrix:
    name: Prepare Environment Matrix
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.select-environments.outputs.environments }}
    steps:
      - id:   select-environments
        uses: DFE-Digital/bat-infrastructure/actions/prepare-environment-matrix@main

  deploy:
    name: ${{ matrix.environment }} Deployment
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.environments) }}
      max-parallel: 1
    steps:
      - uses: softprops/turnstyle@v1
        name: Wait for other inprogress deployment runs
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}

      - name: Start ${{ matrix.environment }} Deployment
        uses: bobheadxi/deployments@v0.4.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          env: ${{ matrix.environment }}
          ref: ${{ github.event.inputs.sha }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment variable
        run: |
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
        env:
          DOCKER_IMAGE: ${{ format('dfedigital/find-teacher-training:{0}', github.event.inputs.sha) }}
          DEPLOY_ENV: ${{ matrix.environment }}

      - name: Terraform init, plan & apply
        id: terraform_deploy
        uses: DFE-Digital/bat-infrastructure/actions/terraform@main
        with:
          DEPLOY_ENV:  ${{ env.DEPLOY_ENV }}
          APP_SECRETS: ${{ secrets[format('APP_SECRETS_{0}', env.DEPLOY_ENV)] }}
        env:
          ARM_ACCESS_KEY: ${{ secrets[format('TERRAFORM_STATE_ACCESS_KEY_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_user: ${{ secrets[format('CF_USER_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_password: ${{ secrets[format('CF_PASSWORD_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_logstash_url: ${{ secrets.LOGSTASH_URL }}
          TF_VAR_paas_app_docker_image: ${{ env.DOCKER_IMAGE }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Trigger ${{ env.DEPLOY_ENV }} Smoke Tests
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Smoke Tests
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"environment": "${{ env.DEPLOY_ENV }}"}'

      - name: Wait for smoke tests
        id: wait_for_smoke_tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          checkName: smoke-tests-${{ env.DEPLOY_ENV }} 
          ref: ${{ github.ref }}
          timeoutSeconds: 300
          intervalSeconds: 15

      - name: Update ${{ matrix.environment }} status
        if: ${{ always() }}
        uses: bobheadxi/deployments@v0.4.2
        with:
          step: finish
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          env: ${{ matrix.environment }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          ref: ${{ github.event.inputs.sha }}
