name: Deploy

on:
  workflow_dispatch:
    inputs:
      qa:
        description: Deploy to qa?
        default: 'false'
        required: true
      staging:
        description: Deploy to staging?
        default: 'false'
        required: true
      production:
        description: Deploy to production?
        default: 'false'
        required: true
      sandbox:
        description: Deploy to sandbox?
        default: 'false'
        required: true
      pr:
        description: PR number for the review app
        required: false
      sha:
        description: Commit sha to be deployed
        required: true

jobs:
  prepare-matrix:
    name: Prepare Environment Matrix
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      environments: ${{ steps.select-environments.outputs.environments || steps.set-pr-environment.outputs.environments }}
    steps:
      - id:   select-environments
        if:   github.event.inputs.pr == ''
        uses: DFE-Digital/bat-infrastructure/actions/prepare-environment-matrix@main

      - id:  set-pr-environment
        if:  github.event.inputs.pr != ''
        run: echo "::set-output name=environments::$PR"
        env:
          PR: '{"environment": ["${{ github.event.inputs.pr }}"]}'

      - uses: DFE-Digital/github-actions/turnstyle@master
        name: Wait for other inprogress deployment runs
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}

  deploy:
    name: ${{ matrix.environment }} Deployment
    runs-on: ubuntu-latest
    needs: [prepare-matrix]
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.environments) }}
      max-parallel: 1
    steps:
      - name: Start ${{ matrix.environment }} Deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          env: ${{ matrix.environment }}
          ref: ${{ github.event.inputs.sha }}

      - name: Checkout
        uses: actions/checkout@v2.3.4

      - name: Set Environment variable
        run: |
          if [ -n "${{ github.event.inputs.pr }}" ]; then
            PR_NUMBER=${{ github.event.inputs.pr }}
            echo "DEPLOY_ENV=review" >> $GITHUB_ENV
            echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
            echo "DEPLOY_URL=https://find-pr-$PR_NUMBER.london.cloudapps.digital" >> $GITHUB_ENV
            . terraform/workspace_variables/review.sh
          else
            echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
            . terraform/workspace_variables/$DEPLOY_ENV.sh
          fi;

          echo "TF_VAR_key_vault_name=$TF_VAR_key_vault_name" >> $GITHUB_ENV
          echo "TF_VAR_key_vault_app_secret_name=$TF_VAR_key_vault_app_secret_name" >> $GITHUB_ENV
          echo "TF_VAR_key_vault_infra_secret_name=$TF_VAR_key_vault_infra_secret_name" >> $GITHUB_ENV
        env:
          DEPLOY_ENV: ${{ matrix.environment }}

      - name: Use Terraform v0.13.5
        uses: hashicorp/setup-terraform@v1.3.2
        with:
          terraform_version: 0.13.5

      - uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}

      - name: Validate Azure Key Vault secrets
        uses: DFE-Digital/github-actions/validate-key-vault-secrets@master
        with:
          KEY_VAULT: ${{ env.TF_VAR_key_vault_name }}
          SECRETS: |
            ${{ env.TF_VAR_key_vault_app_secret_name }}
            ${{ env.TF_VAR_key_vault_infra_secret_name }}

      - name: Terraform init, plan & apply
        run: make ${{ env.DEPLOY_ENV }} ci deploy
        env:
          APP_NAME:                 ${{ env.PR_NUMBER }}
          ARM_ACCESS_KEY:           ${{ secrets[format('TERRAFORM_STATE_ACCESS_KEY_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_azure_credentials: ${{ secrets[format('AZURE_CREDENTIALS_{0}', env.DEPLOY_ENV)] }}
          IMAGE_TAG :               ${{ github.event.inputs.sha }}
          CONFIRM_PRODUCTION:       yes

      - name: Update ${{ matrix.environment }} status
        if: ${{ always() }}
        uses: bobheadxi/deployments@v0.6.0
        with:
          step: finish
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          env: ${{ matrix.environment }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          ref: ${{ github.event.inputs.sha }}
          env_url: ${{ env.DEPLOY_URL }}
