name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to eg: qa, staging, production etc'
        required: true
      sha:
        description: Commit sha to be deployed
        required: true

jobs:
  deploy:
    name: deploy ${{ github.event.inputs.environment }}
    if: ${{ !startsWith(github.event.inputs.environment, 'bat-find-pr') }}
    runs-on: ubuntu-latest
    steps:
      - uses: softprops/turnstyle@v1
        name: Wait for other inprogress deployment runs
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}

      - name: Start ${{ github.event.inputs.environment }} Deployment
        uses: bobheadxi/deployments@v0.4.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          env: ${{ github.event.inputs.environment }}
          ref: ${{ github.event.inputs.sha }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Environment variable
        run: |
          case $DEPLOY_ENV in
            qa) next_env=staging ;;
            staging) next_env=production ;;
          esac

          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_ENV
          echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
          echo "NEXT_ENV=$next_env" >> $GITHUB_ENV
        env:
          DOCKER_IMAGE: ${{ format('dfedigital/find-teacher-training:{0}', github.event.inputs.sha) }}
          DEPLOY_ENV: ${{ github.event.inputs.environment }}

      - name: Use Terraform v0.13.5
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      - name: Download app configuration file
        working-directory: terraform
        run: |
          echo $APP_SECRETS | base64 -d >> app_secrets.yml
        env:
          APP_SECRETS: ${{ secrets[format('APP_SECRETS_{0}', env.DEPLOY_ENV)] }}

      - name: Terraform init, plan & apply
        id: terraform_deploy
        run: |
          terraform init -backend-config=workspace_variables/${{ env.DEPLOY_ENV }}_backend.tfvars
          terraform plan -var-file workspace_variables/${{ env.DEPLOY_ENV }}.tfvars -out tfplan
          terraform apply -auto-approve -input=false "tfplan"
        working-directory: terraform
        env:
          ARM_ACCESS_KEY: ${{ secrets[format('TERRAFORM_STATE_ACCESS_KEY_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_user: ${{ secrets[format('CF_USER_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_password: ${{ secrets[format('CF_PASSWORD_{0}', env.DEPLOY_ENV)] }}
          TF_VAR_paas_logstash_url: ${{ secrets.LOGSTASH_URL }}
          TF_VAR_paas_app_docker_image: ${{ env.DOCKER_IMAGE }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Trigger ${{ env.DEPLOY_ENV }} Smoke Tests
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Smoke Tests
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"environment": "${{ env.DEPLOY_ENV }}"}'

      - name: Wait for smoke tests
        id: wait_for_smoke_tests
        uses: fountainhead/action-wait-for-check@v1.0.0
        with:
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          checkName: smoke-tests-${{ env.DEPLOY_ENV }} 
          ref: ${{ github.ref }}
          timeoutSeconds: 300
          intervalSeconds: 15

      - name: Trigger ${{ env.NEXT_ENV }} Deployment
        if: ${{ steps.wait_for_smoke_tests.outputs.conclusion == 'success' && env.NEXT_ENV != '' && github.ref == 'refs/heads/master' }}
        uses: benc-uk/workflow-dispatch@v1.1
        with:
          workflow: Deploy
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          inputs: '{"environment": "${{ env.NEXT_ENV }}", "sha": "${{ github.event.inputs.sha }}"}'

      - name: Update ${{ github.event.inputs.environment }} status
        if: ${{ always() }}
        uses: bobheadxi/deployments@v0.4.2
        with:
          step: finish
          token: ${{ secrets.ACTIONS_API_ACCESS_TOKEN }}
          env: ${{ github.event.inputs.environment }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          ref: ${{ github.event.inputs.sha }}
