trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  IMAGE_NAME: '$(dockerHubUserName)/find-teacher-training'

steps:
- script: |
    GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
    IMAGE_NAME_WITH_TAG=$(IMAGE_NAME):$GIT_SHORT_SHA
    echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
    echo "##vso[task.setvariable variable=IMAGE_NAME_WITH_TAG;]$IMAGE_NAME_WITH_TAG"
    echo '$(BUILD.SOURCEVERSIONMESSAGE)'> $(build.artifactstagingdirectory)/merge.info
    echo '$(Build.SourceBranchName)'> $(build.artifactstagingdirectory)/branch.info
  displayName: 'Set version number'
- bash: |

   echo '$(BUILD.SOURCEVERSIONMESSAGE)'> $(build.artifactstagingdirectory)/merge.info
   echo 'Hello World'
   echo '$(BUILD.SOURCEVERSIONMESSAGE)'
   echo '$(BUILD_SOURCEVERSIONMESSAGE)'
   echo '$(System.StageName)'

   echo '$(Agent.BuildDirectory)'
   echo '$(Agent.HomeDirectory)'
   echo '$(Agent.Id)'
   echo '$(Agent.JobName)'
   echo '$(Agent.JobStatus)'
   echo '$(Agent.MachineName)'
   echo '$(Agent.Name)'
   echo '$(Agent.OS)'
   echo '$(Agent.OSArchitectureAgent.TempDirectory)'
   echo '$(Agent.ToolsDirectory)'
   echo '$(Agent.WorkFolder)'
   echo '$(Build variablesVariable)'
   echo '$(Build.ArtifactStagingDirectory)'
   echo '$(Build.BuildId)'
   echo '$(Build.BuildNumber)'
   echo '$(Build.BuildUri)'
   echo '$(Build.BinariesDirectory)'
   echo '$(Build.DefinitionName)'
   echo '$(Build.DefinitionVersion)'
   echo '$(Build.QueuedBy)'
   echo '$(Build.QueuedById)'
   echo '$(Build.ReasonBuild.Repository.Clean)'
   echo '$(Build.Repository.LocalPath)'
   echo '$(Build.Repository.ID)'
   echo '$(Build.Repository.Name)'
   echo '$(Build.Repository.Provider)'
   echo '$(Build.Repository.Tfvc.WorkspaceBuild.Repository.UriBuild.RequestedFor)'
   echo '$(Build.RequestedForEmail)'
   echo '$(Build.RequestedForId)'
   echo '$(Build.SourceBranch)'
   echo '$(Build.SourceBranchName)'
   echo '$(Build.SourcesDirectory)'
   echo '$(Build.SourceVersionBuild.SourceVersionMessageBuild.StagingDirectory)'
   echo '$(Build.Repository.Git.SubmoduleCheckout)'
   echo '$(Build.SourceTfvcShelvesetBuild.TriggeredBy.BuildId)'
   echo '$(Build.TriggeredBy.DefinitionId)'
   echo '$(Build.TriggeredBy.DefinitionName)'
   echo '$(Build.TriggeredBy.BuildNumber)'
   echo '$(Build.TriggeredBy.ProjectID)'
   echo '$(Common.TestResultsDirectory)'
   echo '$(System.AccessToken)'
   echo '$(System.CollectionId)'
   echo '$(System.DefaultWorkingDirectory)'
   echo '$(System.DefinitionId)'
   echo '$(System.HostType)'
   echo '$(System.JobAttempt)'
   echo '$(System.JobDisplayName)'
   echo '$(System.JobId)'
   echo '$(System.JobName)'
   echo '$(System.PhaseAttempt)'
   echo '$(System.PhaseDisplayName)'
   echo '$(System.PhaseName)'
   echo '$(System.StageAttempt)'
   echo '$(System.StageDisplayName)'
   echo '$(System.StageName)'
   echo '$(System.PullRequest.IsFork)'
   echo '$(System.PullRequest.PullRequestId)'
   echo '$(System.PullRequest.PullRequestNumber)'
   echo '$(System.PullRequest.SourceBranch)'
   echo '$(System.PullRequest.SourceRepositoryURI)'
   echo '$(System.PullRequest.TargetBranch)'
   echo '$(System.TeamFoundationCollectionUri)'
   echo '$(System.TeamProject)'
   echo '$(System.TeamProjectId)'

  displayName: 'Bash Script'
- script: docker pull $(IMAGE_NAME):latest || true
  displayName: "Pull latest docker image to cache"

- task: Docker@1
  displayName: Build image
  inputs:
    command: Build an image
    imageName: $(IMAGE_NAME)
    dockerFile: Dockerfile
    arguments: '--cache-from $(IMAGE_NAME):latest'
    addDefaultLabels: false

- task: Docker@1
  displayName: Run webpack
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: rails webpacker:compile
    runInBackground: false

- bash: |
    docker run --rm $(IMAGE_NAME) rails spec SPEC_OPTS='--format RspecJunitFormatter' >rspec-results.xml
    test_result=$?
    cat rspec-results.xml
    sed -i '$d;1,5d' rspec-results.xml
    if [ "$test_result" == "0" ] ; then true ; else false ; fi
  displayName: 'Run tests'

- task: Docker@1
  displayName: Run ruby linter
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: rubocop app config db lib spec --format clang
    runInBackground: false

- task: Docker@1
  displayName: Run sass linter
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: govuk-lint-sass app/webpacker/styles
    runInBackground: false

- task: Docker@1
  displayName: Tag image with current build number $(Build.BuildNumber)
  inputs:
    command: Tag image
    imageName: $(IMAGE_NAME)
    arguments: $(IMAGE_NAME_WITH_TAG)

- task: Docker@1
  displayName: Docker Hub login
  inputs:
    command: login
    containerregistrytype: Container Registry
    dockerRegistryEndpoint: DfE Docker Hub

- task: Docker@1
  displayName: Push tagged image
  inputs:
    command: Push an image
    imageName: $(IMAGE_NAME_WITH_TAG)

- task: Docker@1
  displayName: Push tagged image (latest) if master
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: Push an image
    imageName: '$(IMAGE_NAME):latest'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '*.xml'
    failedTaskOnFailedTest: true
