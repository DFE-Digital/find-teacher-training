trigger:
  batch: true
  branches:
    include:
      - "*"

pr: none

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  IMAGE_NAME: '$(dockerHubUserName)/find-teacher-training'

steps:
- script: |
    set -x
    GIT_SHORT_SHA=$(echo $(Build.SourceVersion) | cut -c 1-7)
    IMAGE_NAME_WITH_TAG=$(IMAGE_NAME):$GIT_SHORT_SHA
    set +x
    echo "##vso[build.updatebuildnumber]$GIT_SHORT_SHA"
    echo "##vso[task.setvariable variable=IMAGE_NAME_WITH_TAG;]$IMAGE_NAME_WITH_TAG"
    echo '$(System.PullRequest.SourceBranch)'> $(build.artifactstagingdirectory)/prbranch.info
  displayName: 'Set version number'

- script: docker pull $(IMAGE_NAME):latest || true
  displayName: "Pull latest docker image to cache"

- task: Docker@1
  displayName: Build image
  inputs:
    command: Build an image
    imageName: $(IMAGE_NAME)
    dockerFile: Dockerfile
    arguments: '--cache-from $(IMAGE_NAME):latest'
    addDefaultLabels: false

- task: Docker@1
  displayName: Run webpack
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: rails webpacker:compile
    runInBackground: false

- task: Docker@1
  displayName: Run ruby linter
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: rubocop app config lib spec --format clang
    runInBackground: false

- task: Docker@1
  displayName: Run sass linter
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: scss-lint app/webpacker/styles
    runInBackground: false

- task: Docker@1
  displayName: Run Brakeman static analysis
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: brakeman
    runInBackground: false

- bash: |
    set -x
    docker run --name test-run-image -d $(IMAGE_NAME)
    docker exec test-run-image rails spec SPEC_OPTS='--format RspecJunitFormatter --out rspec-results.xml'
    test_result=$?

    docker cp test-run-image:/app/rspec-results.xml .
    docker cp test-run-image:/app/coverage .
    docker stop test-run-image
    docker rm test-run-image

    if [ "$test_result" == "0" ]; then true; else false; fi
  displayName: 'Run Ruby tests'

- task: Docker@1
  displayName: Run JavaScript tests
  inputs:
    command: Run an image
    imageName: $(IMAGE_NAME)
    containerCommand: yarn test
    runInBackground: false

- script: |
    set -x
    curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
    chmod +x ./cc-test-reporter

    ./cc-test-reporter before-build
    # As the tests were run in the docker container the paths to the coverage are prefixed with "/app/"
    # So we need to replace it with the docker hosts current directory
    sed "s|\"/app/|\"`pwd`/|g" coverage/.resultset.json -i
    ./cc-test-reporter after-build
  displayName: 'Publish Code Climate Test Coverage'
  env:
    CC_TEST_REPORTER_ID: $(ccReporterID)
    GIT_BRANCH: $(Build.SourceBranchName)

- task: Docker@1
  displayName: Tag image with current build number $(Build.BuildNumber)
  inputs:
    command: Tag image
    imageName: $(IMAGE_NAME)
    arguments: $(IMAGE_NAME_WITH_TAG)

- task: Docker@1
  displayName: Docker Hub login
  inputs:
    command: login
    containerregistrytype: Container Registry
    dockerRegistryEndpoint: DfE Docker Hub

- task: Docker@1
  displayName: Push tagged image
  inputs:
    command: Push an image
    imageName: $(IMAGE_NAME_WITH_TAG)

- task: Docker@1
  displayName: Push tagged image (latest) if master
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    command: Push an image
    imageName: '$(IMAGE_NAME):latest'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  inputs:
    Contents: |
     azure/**
     terraform/**
    TargetFolder: '$(build.artifactstagingdirectory)'
    OverWrite: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: JUnit
    testResultsFiles: '*.xml'
    failedTaskOnFailedTest: true
