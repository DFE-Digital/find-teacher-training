# frozen_string_literal: true

desc 'Rubocop'
namespace :rubocop do
  desc 'Copy rubocop config from Apply'
  task :copy_config_from_apply do
    require 'yaml'

    APPLY_REPO = 'http://raw.githubusercontent.com/DFE-Digital/apply-for-teacher-training/main'
    MESSAGE_AT_TOP_OF_FILE = <<~HEREDOC
      #
      # DO NOT EDIT THIS FILE. It was copied from Apply by the rubocop:copy_config_from_apply task at #{Time.now.utc}
      # Add overrides in this repository’s .rubocop.yml
      #
    HEREDOC

    path_depth = URI(APPLY_REPO).path.split('/').count - 1 # leading slash on path gives extra element
    # -q for quiet, -nH for no Host, --cut-dirs to ignore DFE-Digital/apply-for-teacher-training/master when building local paths
    wget_command = "wget -q -nH --cut-dirs=#{path_depth} -x #{APPLY_REPO}/"
    local_apply_config_path = 'config/rubocop/apply'

    system "rm -rf #{local_apply_config_path}"
    system "mkdir -p #{local_apply_config_path}"
    Dir.chdir(local_apply_config_path) do
      system "#{wget_command}.rubocop.yml"
      system 'touch .rubocop_todo.yml' # we don’t care about Apply’s version, but Rubocop will expect this file to be present

      apply_config = YAML.load_file('.rubocop.yml')
      config_files = apply_config['inherit_from'].reject { |file| file.match(%r{rubocop_todo.yml}) }
      deps_files = apply_config['require'].select { |dep| dep.match(%r{^\.}) }

      (config_files + deps_files).each do |file|
        puts "Getting #{file}"
        system("#{wget_command}#{file}")
        system("echo \"$(echo '#{MESSAGE_AT_TOP_OF_FILE}'; cat #{file})\" > #{file}")
      end

      system("echo \"$(echo '#{MESSAGE_AT_TOP_OF_FILE}'; cat .rubocop.yml)\" > .rubocop.yml")
    end
  end
end
